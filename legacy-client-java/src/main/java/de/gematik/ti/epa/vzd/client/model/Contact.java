/*
 * I_Directory_Administration
 * REST Schnittstelle zur Pflege der Verzeichniseinträge. Über diese Schnittstelle können Verzeichniseinträge inklusive Zertifikaten erzeugt, aktualisiert und gelöscht werden. Die Administration von Fachdaten erfolgt über Schnittstelle I_Directory_Application_Maintenance und wird durch die Fachanwendungen durchgeführt. Lesender Zugriff auf die Fachdaten ist mit Operation getDirectoryEntries in vorliegender Schnittstelle möglich.
 *
 * The version of the OpenAPI document: 1.6.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.gematik.ti.epa.vzd.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.net.URI;
import java.util.Objects;

/**
 * Die Kontaktinformationen für diese Schnittstelle.
 */
@ApiModel(description = "Die Kontaktinformationen für diese Schnittstelle.")

public class Contact {

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;


  public Contact name(String name) {

    this.name = name;
    return this;
  }

  /**
   * Der Name von der Kontaktperson / -Organisation
   *
   * @return name
   **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Firma 123", value = "Der Name von der Kontaktperson / -Organisation")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public Contact url(URI url) {

    this.url = url;
    return this;
  }

  /**
   * Eine URL zu den Kontaktinformationen für dieses API. In dem Dokument unter dieser URL muss ein
   * Link zum Download der aktuell genutzten YAML Datei dieser Schnittstelle hinterlegt sein.
   *
   * @return url
   **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "http://www.example.com/support", value = "Eine URL zu den Kontaktinformationen für dieses API. In dem Dokument unter dieser URL muss ein Link zum Download der aktuell genutzten YAML Datei dieser Schnittstelle hinterlegt sein.")

  public URI getUrl() {
    return url;
  }


  public void setUrl(URI url) {
    this.url = url;
  }


  public Contact email(String email) {

    this.email = email;
    return this;
  }

  /**
   * Der E-Mail Adresse der Kontaktperson / -Organisation.
   *
   * @return email
   **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "support@example.com", value = "Der E-Mail Adresse der Kontaktperson / -Organisation.")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    this.email = email;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Contact contact = (Contact) o;
    return Objects.equals(this.name, contact.name) &&
        Objects.equals(this.url, contact.url) &&
        Objects.equals(this.email, contact.email);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, url, email);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Contact {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first
   * line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

