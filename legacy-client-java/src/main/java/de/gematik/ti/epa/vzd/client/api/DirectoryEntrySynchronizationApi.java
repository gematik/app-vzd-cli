/*
 * I_Directory_Administration
 * REST Schnittstelle zur Pflege der Verzeichniseinträge. Über diese Schnittstelle können Verzeichniseinträge inklusive Zertifikaten erzeugt, aktualisiert und gelöscht werden. Die Administration von Fachdaten erfolgt über Schnittstelle I_Directory_Application_Maintenance und wird durch die Fachanwendungen durchgeführt. Lesender Zugriff auf die Fachdaten ist mit Operation getDirectoryEntries in vorliegender Schnittstelle möglich.
 *
 * The version of the OpenAPI document: 1.6.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.gematik.ti.epa.vzd.client.api;

import com.google.gson.reflect.TypeToken;
import de.gematik.ti.epa.vzd.client.invoker.*;
import de.gematik.ti.epa.vzd.client.model.DirectoryEntries;
import de.gematik.ti.epa.vzd.client.model.DirectoryEntry;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DirectoryEntrySynchronizationApi {

  private ApiClient localVarApiClient;

  public DirectoryEntrySynchronizationApi() {
    this(Configuration.getDefaultApiClient());
  }

  public DirectoryEntrySynchronizationApi(ApiClient apiClient) {
    this.localVarApiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return localVarApiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.localVarApiClient = apiClient;
  }

  /**
   * Build call for readDirectoryEntryForSync
   *
   * @param uid                 ID von dem Verzeichniseintrag (distinguishedName.uid) (optional)
   * @param givenName           Erlaubt die Suche mit Hilfe des Attributs givenName. (optional)
   * @param sn                  Erlaubt die Suche mit Hilfe des Attributs sn. (optional)
   * @param cn                  Erlaubt die Suche mit Hilfe des Attributs cn. (optional)
   * @param displayName         Erlaubt die Suche mit Hilfe des Attributs displayName. (optional)
   * @param streetAddress       Erlaubt die Suche mit Hilfe des Attributs streetAddress. (optional)
   * @param postalCode          Erlaubt die Suche mit Hilfe des Attributs postalCode. (optional)
   * @param countryCode         Erlaubt die Suche mit Hilfe des Attributs countryCode. (optional)
   * @param localityName        Erlaubt die Suche mit Hilfe des Attributs localityName. (optional)
   * @param stateOrProvinceName Erlaubt die Suche mit Hilfe des Attributs stateOrProvinceName.
   *                            (optional)
   * @param title               Erlaubt die Suche mit Hilfe des Attributs title. (optional)
   * @param organization        Erlaubt die Suche mit Hilfe des Attributs organization. (optional)
   * @param otherName           Erlaubt die Suche mit Hilfe des Attributs otherName. (optional)
   * @param telematikID         Erlaubt die Suche mit Hilfe des Attributs telematikID (die
   *                            telematikID in den Basisdaten). (optional)
   * @param telematikIDSubStr   Erlaubt die Suche nach einem Substring am Anfang der telematikID
   *                            (die telematikID in den Basisdaten). Entspricht der LDAP Filters
   *                            Substring Assertion vom Typ \&quot;subInitial Component\&quot;.
   *                            (optional)
   * @param specialization      Erlaubt die Suche mit Hilfe des Attributs specialization. Der
   *                            Verzeichniseintrag wird selektiert, wenn die angegebene domainID im
   *                            Attribut domainID (array) des Verzeichniseintrags enthalten ist.
   *                            (optional)
   * @param domainID            Erlaubt die Suche mit Hilfe des Attributs domainID. Der
   *                            Verzeichniseintrag wird selektiert, wenn die angegebene domainID im
   *                            Attribut domainID (array) des Verzeichniseintrags enthalten ist.
   *                            (optional)
   * @param holder              Erlaubt die Suche mit Hilfe des Attributs holder. Der
   *                            Verzeichniseintrag wird selektiert, wenn der angegebene holder im
   *                            Attribut holder (array) des Verzeichniseintrags enthalten ist. Wenn
   *                            der Parameter mit dem eigenen Wert des Clients belegt wird, werden
   *                            alle gefundenen Einträge zurückgegeben (für eigene Einträge gilt das
   *                            Limit von 100 Ergebnissen nicht). Zur Suche nach Einträge ohne
   *                            holder ist der Parameter mit dem einem leeren String \&quot;\&quot;
   *                            zu belegen. Auch in diesem Fall werden alle gefundenen Einträge
   *                            zurückgegeben (für Einträge ohne holder gilt das Limit von 100
   *                            Ergebnissen nicht). (optional)
   * @param personalEntry       Erlaubt die Suche mit Hilfe des Attributs personalEntry. (optional)
   * @param dataFromAuthority   Erlaubt die Suche mit Hilfe des Attributs dataFromAuthority.
   *                            (optional)
   * @param baseEntryOnly       Mit baseEntryOnly &#x3D; \&quot;true\&quot; wird nur der
   *                            Basiseintrag (baseDirectoryEntry) im Response zurückgegeben. Falls
   *                            nicht angegeben oder mit \&quot;false\&quot; belegt, wird der
   *                            gesamte Verzeichniseintrag mit Zertifikaten und Fachdaten im
   *                            Response zurückgegeben. (optional)
   * @param _callback           Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call readDirectoryEntryForSyncCall(String uid, String givenName, String sn,
      String cn, String displayName, String streetAddress,
      String postalCode, String countryCode, String localityName, String stateOrProvinceName,
      String title, String organization, String otherName,
      String telematikID, String telematikIDSubStr, String specialization, String domainID,
      String holder, String personalEntry,
      String dataFromAuthority, Boolean baseEntryOnly, final ApiCallback _callback)
      throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/DirectoryEntriesSync";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    if (uid != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("uid", uid));
    }

    if (givenName != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("givenName", givenName));
    }

    if (sn != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("sn", sn));
    }

    if (cn != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("cn", cn));
    }

    if (displayName != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("displayName", displayName));
    }

    if (streetAddress != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("streetAddress", streetAddress));
    }

    if (postalCode != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("postalCode", postalCode));
    }

    if (countryCode != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("countryCode", countryCode));
    }

    if (localityName != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("localityName", localityName));
    }

    if (stateOrProvinceName != null) {
      localVarQueryParams.addAll(
          localVarApiClient.parameterToPair("stateOrProvinceName", stateOrProvinceName));
    }

    if (title != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("title", title));
    }

    if (organization != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("organization", organization));
    }

    if (otherName != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("otherName", otherName));
    }

    if (telematikID != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("telematikID", telematikID));
    }

    if (telematikIDSubStr != null) {
      localVarQueryParams.addAll(
          localVarApiClient.parameterToPair("telematikID-SubStr", telematikIDSubStr));
    }

    if (specialization != null) {
      localVarQueryParams.addAll(
          localVarApiClient.parameterToPair("specialization", specialization));
    }

    if (domainID != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("domainID", domainID));
    }

    if (holder != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("holder", holder));
    }

    if (personalEntry != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("personalEntry", personalEntry));
    }

    if (dataFromAuthority != null) {
      localVarQueryParams.addAll(
          localVarApiClient.parameterToPair("dataFromAuthority", dataFromAuthority));
    }

    if (baseEntryOnly != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("baseEntryOnly", baseEntryOnly));
    }

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();
    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = localVarApiClient.selectHeaderContentType(
        localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    String[] localVarAuthNames = new String[]{"OAuth2"};
    return localVarApiClient
        .buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
            localVarPostBody, localVarHeaderParams,
            localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call readDirectoryEntryForSyncValidateBeforeCall(String uid, String givenName,
      String sn, String cn, String displayName,
      String streetAddress, String postalCode, String countryCode, String localityName,
      String stateOrProvinceName, String title,
      String organization, String otherName, String telematikID, String telematikIDSubStr,
      String specialization, String domainID, String holder,
      String personalEntry, String dataFromAuthority, Boolean baseEntryOnly,
      final ApiCallback _callback) throws ApiException {

    okhttp3.Call localVarCall = readDirectoryEntryForSyncCall(uid, givenName, sn, cn, displayName,
        streetAddress, postalCode, countryCode,
        localityName, stateOrProvinceName, title, organization, otherName, telematikID,
        telematikIDSubStr, specialization, domainID, holder,
        personalEntry, dataFromAuthority, baseEntryOnly, _callback);
    return localVarCall;

  }

  /**
   * Synchronisation der Verzeichniseinträge zwischen VZD und Herausgeber Liefert - analog zu
   * read_Directory_Entry - alle zum Filter passenden Verzeichniseinträge. Im Unterschied zu
   * read_Directory_Entry wird die Limitierung auf 100 Suchergebnisse aufgehoben. Die parallele
   * Ausführung dieser Operation wird vom Server aus Performancegründen eingeschränkt. Diese
   * Operation soll nur genutzt werden, wenn mehr als 100 Suchergebnisse benötigt werden. Für alle
   * anderen Suchanfragen soll Operation read_Directory_Entry genutzt werden.
   *
   * @param uid                 ID von dem Verzeichniseintrag (distinguishedName.uid) (optional)
   * @param givenName           Erlaubt die Suche mit Hilfe des Attributs givenName. (optional)
   * @param sn                  Erlaubt die Suche mit Hilfe des Attributs sn. (optional)
   * @param cn                  Erlaubt die Suche mit Hilfe des Attributs cn. (optional)
   * @param displayName         Erlaubt die Suche mit Hilfe des Attributs displayName. (optional)
   * @param streetAddress       Erlaubt die Suche mit Hilfe des Attributs streetAddress. (optional)
   * @param postalCode          Erlaubt die Suche mit Hilfe des Attributs postalCode. (optional)
   * @param countryCode         Erlaubt die Suche mit Hilfe des Attributs countryCode. (optional)
   * @param localityName        Erlaubt die Suche mit Hilfe des Attributs localityName. (optional)
   * @param stateOrProvinceName Erlaubt die Suche mit Hilfe des Attributs stateOrProvinceName.
   *                            (optional)
   * @param title               Erlaubt die Suche mit Hilfe des Attributs title. (optional)
   * @param organization        Erlaubt die Suche mit Hilfe des Attributs organization. (optional)
   * @param otherName           Erlaubt die Suche mit Hilfe des Attributs otherName. (optional)
   * @param telematikID         Erlaubt die Suche mit Hilfe des Attributs telematikID (die
   *                            telematikID in den Basisdaten). (optional)
   * @param telematikIDSubStr   Erlaubt die Suche nach einem Substring am Anfang der telematikID
   *                            (die telematikID in den Basisdaten). Entspricht der LDAP Filters
   *                            Substring Assertion vom Typ \&quot;subInitial Component\&quot;.
   *                            (optional)
   * @param specialization      Erlaubt die Suche mit Hilfe des Attributs specialization. Der
   *                            Verzeichniseintrag wird selektiert, wenn die angegebene domainID im
   *                            Attribut domainID (array) des Verzeichniseintrags enthalten ist.
   *                            (optional)
   * @param domainID            Erlaubt die Suche mit Hilfe des Attributs domainID. Der
   *                            Verzeichniseintrag wird selektiert, wenn die angegebene domainID im
   *                            Attribut domainID (array) des Verzeichniseintrags enthalten ist.
   *                            (optional)
   * @param holder              Erlaubt die Suche mit Hilfe des Attributs holder. Der
   *                            Verzeichniseintrag wird selektiert, wenn der angegebene holder im
   *                            Attribut holder (array) des Verzeichniseintrags enthalten ist. Wenn
   *                            der Parameter mit dem eigenen Wert des Clients belegt wird, werden
   *                            alle gefundenen Einträge zurückgegeben (für eigene Einträge gilt das
   *                            Limit von 100 Ergebnissen nicht). Zur Suche nach Einträge ohne
   *                            holder ist der Parameter mit dem einem leeren String \&quot;\&quot;
   *                            zu belegen. Auch in diesem Fall werden alle gefundenen Einträge
   *                            zurückgegeben (für Einträge ohne holder gilt das Limit von 100
   *                            Ergebnissen nicht). (optional)
   * @param personalEntry       Erlaubt die Suche mit Hilfe des Attributs personalEntry. (optional)
   * @param dataFromAuthority   Erlaubt die Suche mit Hilfe des Attributs dataFromAuthority.
   *                            (optional)
   * @param baseEntryOnly       Mit baseEntryOnly &#x3D; \&quot;true\&quot; wird nur der
   *                            Basiseintrag (baseDirectoryEntry) im Response zurückgegeben. Falls
   *                            nicht angegeben oder mit \&quot;false\&quot; belegt, wird der
   *                            gesamte Verzeichniseintrag mit Zertifikaten und Fachdaten im
   *                            Response zurückgegeben. (optional)
   * @return List&lt;DirectoryEntry&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *                      response body
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
   * </table>
   */
  public DirectoryEntries readDirectoryEntryForSync(String uid, String givenName, String sn,
      String cn, String displayName,
      String streetAddress, String postalCode, String countryCode, String localityName,
      String stateOrProvinceName, String title,
      String organization, String otherName, String telematikID, String telematikIDSubStr,
      String specialization, String domainID, String holder,
      String personalEntry, String dataFromAuthority, Boolean baseEntryOnly) throws ApiException {
    ApiResponse<DirectoryEntries> localVarResp = readDirectoryEntryForSyncWithHttpInfo(uid,
        givenName, sn, cn, displayName, streetAddress,
        postalCode, countryCode, localityName, stateOrProvinceName, title, organization, otherName,
        telematikID, telematikIDSubStr,
        specialization, domainID, holder, personalEntry, dataFromAuthority, baseEntryOnly);
    return localVarResp.getData();
  }

  /**
   * Synchronisation der Verzeichniseinträge zwischen VZD und Herausgeber Liefert - analog zu
   * read_Directory_Entry - alle zum Filter passenden Verzeichniseinträge. Im Unterschied zu
   * read_Directory_Entry wird die Limitierung auf 100 Suchergebnisse aufgehoben. Die parallele
   * Ausführung dieser Operation wird vom Server aus Performancegründen eingeschränkt. Diese
   * Operation soll nur genutzt werden, wenn mehr als 100 Suchergebnisse benötigt werden. Für alle
   * anderen Suchanfragen soll Operation read_Directory_Entry genutzt werden.
   *
   * @param uid                 ID von dem Verzeichniseintrag (distinguishedName.uid) (optional)
   * @param givenName           Erlaubt die Suche mit Hilfe des Attributs givenName. (optional)
   * @param sn                  Erlaubt die Suche mit Hilfe des Attributs sn. (optional)
   * @param cn                  Erlaubt die Suche mit Hilfe des Attributs cn. (optional)
   * @param displayName         Erlaubt die Suche mit Hilfe des Attributs displayName. (optional)
   * @param streetAddress       Erlaubt die Suche mit Hilfe des Attributs streetAddress. (optional)
   * @param postalCode          Erlaubt die Suche mit Hilfe des Attributs postalCode. (optional)
   * @param countryCode         Erlaubt die Suche mit Hilfe des Attributs countryCode. (optional)
   * @param localityName        Erlaubt die Suche mit Hilfe des Attributs localityName. (optional)
   * @param stateOrProvinceName Erlaubt die Suche mit Hilfe des Attributs stateOrProvinceName.
   *                            (optional)
   * @param title               Erlaubt die Suche mit Hilfe des Attributs title. (optional)
   * @param organization        Erlaubt die Suche mit Hilfe des Attributs organization. (optional)
   * @param otherName           Erlaubt die Suche mit Hilfe des Attributs otherName. (optional)
   * @param telematikID         Erlaubt die Suche mit Hilfe des Attributs telematikID (die
   *                            telematikID in den Basisdaten). (optional)
   * @param telematikIDSubStr   Erlaubt die Suche nach einem Substring am Anfang der telematikID
   *                            (die telematikID in den Basisdaten). Entspricht der LDAP Filters
   *                            Substring Assertion vom Typ \&quot;subInitial Component\&quot;.
   *                            (optional)
   * @param specialization      Erlaubt die Suche mit Hilfe des Attributs specialization. Der
   *                            Verzeichniseintrag wird selektiert, wenn die angegebene domainID im
   *                            Attribut domainID (array) des Verzeichniseintrags enthalten ist.
   *                            (optional)
   * @param domainID            Erlaubt die Suche mit Hilfe des Attributs domainID. Der
   *                            Verzeichniseintrag wird selektiert, wenn die angegebene domainID im
   *                            Attribut domainID (array) des Verzeichniseintrags enthalten ist.
   *                            (optional)
   * @param holder              Erlaubt die Suche mit Hilfe des Attributs holder. Der
   *                            Verzeichniseintrag wird selektiert, wenn der angegebene holder im
   *                            Attribut holder (array) des Verzeichniseintrags enthalten ist. Wenn
   *                            der Parameter mit dem eigenen Wert des Clients belegt wird, werden
   *                            alle gefundenen Einträge zurückgegeben (für eigene Einträge gilt das
   *                            Limit von 100 Ergebnissen nicht). Zur Suche nach Einträge ohne
   *                            holder ist der Parameter mit dem einem leeren String \&quot;\&quot;
   *                            zu belegen. Auch in diesem Fall werden alle gefundenen Einträge
   *                            zurückgegeben (für Einträge ohne holder gilt das Limit von 100
   *                            Ergebnissen nicht). (optional)
   * @param personalEntry       Erlaubt die Suche mit Hilfe des Attributs personalEntry. (optional)
   * @param dataFromAuthority   Erlaubt die Suche mit Hilfe des Attributs dataFromAuthority.
   *                            (optional)
   * @param baseEntryOnly       Mit baseEntryOnly &#x3D; \&quot;true\&quot; wird nur der
   *                            Basiseintrag (baseDirectoryEntry) im Response zurückgegeben. Falls
   *                            nicht angegeben oder mit \&quot;false\&quot; belegt, wird der
   *                            gesamte Verzeichniseintrag mit Zertifikaten und Fachdaten im
   *                            Response zurückgegeben. (optional)
   * @return ApiResponse&lt;List&lt;DirectoryEntry&gt;&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *                      response body
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<DirectoryEntries> readDirectoryEntryForSyncWithHttpInfo(String uid,
      String givenName, String sn, String cn,
      String displayName, String streetAddress, String postalCode, String countryCode,
      String localityName, String stateOrProvinceName,
      String title, String organization, String otherName, String telematikID,
      String telematikIDSubStr, String specialization, String domainID,
      String holder, String personalEntry, String dataFromAuthority, Boolean baseEntryOnly)
      throws ApiException {
    okhttp3.Call localVarCall = readDirectoryEntryForSyncValidateBeforeCall(uid, givenName, sn, cn,
        displayName, streetAddress, postalCode,
        countryCode, localityName, stateOrProvinceName, title, organization, otherName, telematikID,
        telematikIDSubStr, specialization, domainID,
        holder, personalEntry, dataFromAuthority, baseEntryOnly, null);
    Type localVarReturnType = new TypeToken<DirectoryEntries>() {
    }.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Synchronisation der Verzeichniseinträge zwischen VZD und Herausgeber (asynchronously) Liefert -
   * analog zu read_Directory_Entry - alle zum Filter passenden Verzeichniseinträge. Im Unterschied
   * zu read_Directory_Entry wird die Limitierung auf 100 Suchergebnisse aufgehoben. Die parallele
   * Ausführung dieser Operation wird vom Server aus Performancegründen eingeschränkt. Diese
   * Operation soll nur genutzt werden, wenn mehr als 100 Suchergebnisse benötigt werden. Für alle
   * anderen Suchanfragen soll Operation read_Directory_Entry genutzt werden.
   *
   * @param uid                 ID von dem Verzeichniseintrag (distinguishedName.uid) (optional)
   * @param givenName           Erlaubt die Suche mit Hilfe des Attributs givenName. (optional)
   * @param sn                  Erlaubt die Suche mit Hilfe des Attributs sn. (optional)
   * @param cn                  Erlaubt die Suche mit Hilfe des Attributs cn. (optional)
   * @param displayName         Erlaubt die Suche mit Hilfe des Attributs displayName. (optional)
   * @param streetAddress       Erlaubt die Suche mit Hilfe des Attributs streetAddress. (optional)
   * @param postalCode          Erlaubt die Suche mit Hilfe des Attributs postalCode. (optional)
   * @param countryCode         Erlaubt die Suche mit Hilfe des Attributs countryCode. (optional)
   * @param localityName        Erlaubt die Suche mit Hilfe des Attributs localityName. (optional)
   * @param stateOrProvinceName Erlaubt die Suche mit Hilfe des Attributs stateOrProvinceName.
   *                            (optional)
   * @param title               Erlaubt die Suche mit Hilfe des Attributs title. (optional)
   * @param organization        Erlaubt die Suche mit Hilfe des Attributs organization. (optional)
   * @param otherName           Erlaubt die Suche mit Hilfe des Attributs otherName. (optional)
   * @param telematikID         Erlaubt die Suche mit Hilfe des Attributs telematikID (die
   *                            telematikID in den Basisdaten). (optional)
   * @param telematikIDSubStr   Erlaubt die Suche nach einem Substring am Anfang der telematikID
   *                            (die telematikID in den Basisdaten). Entspricht der LDAP Filters
   *                            Substring Assertion vom Typ \&quot;subInitial Component\&quot;.
   *                            (optional)
   * @param specialization      Erlaubt die Suche mit Hilfe des Attributs specialization. Der
   *                            Verzeichniseintrag wird selektiert, wenn die angegebene domainID im
   *                            Attribut domainID (array) des Verzeichniseintrags enthalten ist.
   *                            (optional)
   * @param domainID            Erlaubt die Suche mit Hilfe des Attributs domainID. Der
   *                            Verzeichniseintrag wird selektiert, wenn die angegebene domainID im
   *                            Attribut domainID (array) des Verzeichniseintrags enthalten ist.
   *                            (optional)
   * @param holder              Erlaubt die Suche mit Hilfe des Attributs holder. Der
   *                            Verzeichniseintrag wird selektiert, wenn der angegebene holder im
   *                            Attribut holder (array) des Verzeichniseintrags enthalten ist. Wenn
   *                            der Parameter mit dem eigenen Wert des Clients belegt wird, werden
   *                            alle gefundenen Einträge zurückgegeben (für eigene Einträge gilt das
   *                            Limit von 100 Ergebnissen nicht). Zur Suche nach Einträge ohne
   *                            holder ist der Parameter mit dem einem leeren String \&quot;\&quot;
   *                            zu belegen. Auch in diesem Fall werden alle gefundenen Einträge
   *                            zurückgegeben (für Einträge ohne holder gilt das Limit von 100
   *                            Ergebnissen nicht). (optional)
   * @param personalEntry       Erlaubt die Suche mit Hilfe des Attributs personalEntry. (optional)
   * @param dataFromAuthority   Erlaubt die Suche mit Hilfe des Attributs dataFromAuthority.
   *                            (optional)
   * @param baseEntryOnly       Mit baseEntryOnly &#x3D; \&quot;true\&quot; wird nur der
   *                            Basiseintrag (baseDirectoryEntry) im Response zurückgegeben. Falls
   *                            nicht angegeben oder mit \&quot;false\&quot; belegt, wird der
   *                            gesamte Verzeichniseintrag mit Zertifikaten und Fachdaten im
   *                            Response zurückgegeben. (optional)
   * @param _callback           The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call readDirectoryEntryForSyncAsync(String uid, String givenName, String sn,
      String cn, String displayName, String streetAddress,
      String postalCode, String countryCode, String localityName, String stateOrProvinceName,
      String title, String organization, String otherName,
      String telematikID, String telematikIDSubStr, String specialization, String domainID,
      String holder, String personalEntry,
      String dataFromAuthority, Boolean baseEntryOnly,
      final ApiCallback<List<DirectoryEntry>> _callback) throws ApiException {

    okhttp3.Call localVarCall = readDirectoryEntryForSyncValidateBeforeCall(uid, givenName, sn, cn,
        displayName, streetAddress, postalCode,
        countryCode, localityName, stateOrProvinceName, title, organization, otherName, telematikID,
        telematikIDSubStr, specialization, domainID,
        holder, personalEntry, dataFromAuthority, baseEntryOnly, _callback);
    Type localVarReturnType = new TypeToken<List<DirectoryEntry>>() {
    }.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }
}
